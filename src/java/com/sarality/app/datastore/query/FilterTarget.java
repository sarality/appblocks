package com.sarality.app.datastore.query;

import com.sarality.app.datastore.Column;

/**
 * Part of the Query Filter that defines the Column on which the filter is defined
 * and whether this is and AND or a OR filter.
 * <p>
 * The class is an interim object generated by the QueryBuilder, which can in turn
 * add a Filter to the Builder when the filter value is provided.
 * 
 * @author abhideep@ (Abhideep Singh) 
 */
public class FilterTarget {
  private QueryBuilder builder;
  private Column column;
  private Operator operator;

  /**
   * Package protected Builder since the class should only be created by the Builder.
   * 
   * @param builder QueryBuilder that generated this Target
   * @param column Column that this is a Filter for
   * @param operator Operation that needs to be performed on the column.
   */
  FilterTarget(QueryBuilder builder, Column column, Operator operator) {
    if (!builder.getDataStore().getColumns().contains(column)) {
      throw new IllegalArgumentException("Cannot set filter on Column " + column.getName() 
          + " as it is not a column on Data Store " + builder.getDataStore().getName());
    }
    this.builder = builder;
    this.column = column;
    this.operator = operator;
  }

  /**
   * Add an Equals filter to the builder and returns the modified builder.
   * 
   * @param value The value that the column must be equal to
   * @return Modified QueryBuilder
   */
  public QueryBuilder equals(FilterValue<?> value) {
    return addFilter(value, Operator.EQUALS);
  }

  /**
   * Add a Not Equals filter to the builder and returns the modified builder.
   * 
   * @param value The value that the column be must not be equal to.
   * @return Modified QueryBuilder
   */
  public QueryBuilder notEquals(FilterValue<?> value) {
    return addFilter(value, Operator.NOT_EQUALS);
  }

  /**
   * Add a Less than filter to the builder and returns the modified builder.
   * 
   * @param value The value that the column must be less than.
   * @return Modified QueryBuilder
   */
  public QueryBuilder lessThan(FilterValue<?> value) {
    return addFilter(value, Operator.LESS_THAN);
  }

  /**
   * Add a Greater than filter to the builder and returns the modified builder.
   * 
   * @param value The value that the column must be greater than.
   * @return Modified QueryBuilder
   */
  public QueryBuilder greaterThan(FilterValue<?> value) {
    return addFilter(value, Operator.GREATER_THAN);
  }

  /**
   * Add a filter to the builder that checks if a column is null, 
   * and returns the modified builder.
   * 
   * @return Modified QueryBuilder
   */  
  public QueryBuilder isNull() {
    return addFilter(Operator.IS_NULL);
  }

  /**
   * Add a filter to the builder that checks if a column is not null, 
   * and returns the modified builder.
   * 
   * @return Modified QueryBuilder
   */  
  public QueryBuilder isNotNull() {
    return addFilter(Operator.IS_NOT_NULL);
  }

  private QueryBuilder addFilter(Operator filterOperator) {
    if (operator == Operator.AND || operator == null) {
      builder.addAndFilter(column, filterOperator);
    } else {
      builder.addOrFilter(column, filterOperator);      
    }
    return builder;    
  }

  private QueryBuilder addFilter(FilterValue<?> value, Operator filterOperator) {
    if (operator == Operator.AND || operator == null) {
      builder.addAndFilter(column, filterOperator, value.getStringValue(column));
    } else {
      builder.addOrFilter(column, filterOperator, value.getStringValue(column));      
    }
    return builder;    
  }
}
